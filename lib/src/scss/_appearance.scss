@use "mixins" as *;
@use "functions" as *;
@use "config" as *;

:root {
  @include load-config($config);
}

.rst-container {
  .rst-table {
    table-layout: fixed;
    border-collapse: separate;
    border-spacing: 0;
    width: 100%;
    overflow: hidden;
  }

  .rst-scrollingContainer {
    overflow: auto;
  }

  .rst-resizingContainer {
    // The first column has a left border, because if it has the same width as another column,
    // we want it to fit the same amount of content and not border-width more.
    // But we want the table to have no outside borders, in order to look pretty inside bordered containers,
    // so we crop the first column's left border
    margin-left: negative(get-config-value("column", "border-width"))
  }

  .rst-icon {
    height: 1rem;
    fill: currentColor;
    flex: none;
  }

  .rst-lineHeight::before {
    //Zero width space, to set the height of the container to the line-height
    content: '\200b';
  }

  .rst-inlineIcons {
    display: inline-flex;
    align-items: center;
    vertical-align: bottom;
  }

  .rst-row {
    &:not(:last-child) > * {
      @include apply-properties("row", ("border": "border-bottom"));
    }

    & > * {
      @include apply-properties("column", ("border": "border-left"));
    }
  }

  .rst-header {
    @include apply-properties("header", ["text-align" "font-weight" "color"]);
  }

  .rst-head {
    @include apply-properties("head", ["background-color" ("border": "border-bottom")]);

    .rst-row {
      &:last-child > .rst-header {
        @include override-properties("header_leaf");
      }

      & > * {
        position: relative;
        padding: 0;

        @include apply-properties("head", ["vertical-align"]);

        %resizer {
          position: absolute;
          top: 0;
          height: 100%;
          width: calc(
                  #{get-config-value("cell", "padding-left")} +
                  #{get-config-value("column", "border-width")} +
                  #{get-config-value("cell", "padding-right")}
          );
          cursor: col-resize;
        }

        & > .rst-columnResizer {
          @extend %resizer;
          z-index: 2;
          left: get-config-value("cell", "padding-left");
          transform: translateX(-100%);
          max-width: 100%; //To not overflow when column is collapsed
        }

        & > .rst-edgeResizer {
          @extend %resizer;
          z-index: 1;
          right: get-config-value("column", "border-width");
        }

        &.rst-spacer::after {
          // Prevents the edge resizer being visible when not necessary
          content: '';
          z-index: 1;
          position: absolute;
          inset: 0;
        }

        .rst-ellipsis {
          overflow: hidden;
          text-overflow: ellipsis;
        }

        & > .rst-content {
          @extend .rst-ellipsis;
          @include apply-properties("cell", ["padding"]);

          & > .rst-status {
            @extend .rst-inlineIcons;
            max-width: 100%;
            @include apply-properties("header-status", ["color"]);
          }
        }
        
        &[data-is-sortable="true"] {
          cursor: pointer;
        }
      }
    }
  }

  &[data-header-nowrap="true"] .rst-head .rst-row > * > .rst-content {
    display: inline-flex;
    box-sizing: border-box;
    max-width: 100%;
    white-space: pre;
    padding-right: 0;

    .rst-ellipsis:last-child {
      // Transfer padding to shrinking child to ensure that the overflow below the right padding remains visible
      @include apply-properties("cell", ["padding-right"]);
    }

    & > .rst-inner {
      flex: 1 0 0; //Shrink first
    }

    & > .rst-spacer {
      flex: 0 1 auto; //Shrink second
      min-width: 0;
    }

    & > .rst-status {
      flex: none; //Shrink third (because of max-width)
    }
  }

  .rst-body {
    @include apply-properties("body", ["background-color"]);

    .rst-row {
      @include apply-properties("data", ["font-weight" "color" "text-align"]);
    }

    .rst-row > * {
      overflow: hidden;
      //background-clip: padding-box;

      @include apply-properties("cell", ["padding"]);
      @include apply-properties("body", ["vertical-align"]);

      &.rst-header {
        @include override-properties("header_row");
      }
    }
  }

  .rst-pagination {
    display: grid;
    justify-content: start;
    grid-auto-flow: column;

    @include apply-properties("pg", ["color" "padding" ("item-spacing": "grid-gap")]);
  }

  .rst-page {
    text-align: center;
    box-sizing: content-box;
    line-height: 1.25rem;

    @include apply-properties("pg-page", ["padding" "width" "border-radius" "border" "color"]);

    border-color: transparent;
  }
}

button.rst-page {
  @include apply-properties("pg-page", ["background-color", "border-color", "color"]);

  &:hover {
    @include override-properties("pg-page_hover");
  }

  &[data-is-current="true"] {
    @include override-properties("pg-page_current");
  }
}


//%disabled-main {
//  @include apply-properties("root-container",
//          "margin",
//          "background-color"
//  );
//
//  .rst-row {
//    @include apply-properties("row", "border-color");
//
//    & > * {
//      @include apply-properties("cell", "padding");
//      @include apply-properties("row", "border" "border-bottom");
//      @include apply-properties("column", "border" "border-left");
//      background-clip: padding-box;
//      border-top: none; // Bootstrap adds top border
//      border-bottom-color: inherit;
//    }
//
//    .rst-spacer {
//      border-left: none;
//    }
//
//    $separator-width: get-property("column-separator", "width");
//    $separator-color: get-property("column-separator", "color");
//
//    .rst-header {
//      @include apply-properties("header", "font-weight");
//      box-shadow: inset-border($separator-width, $separator-color, left);
//      padding-right: $separator-width;
//    }
//
//    .rst-endCap {
//      padding: 0;
//      $spread: calc(#{$separator-width} / 2);
//      box-shadow: negative($spread) negative($spread) 0 $spread $separator-color;
//    }
//  }
//
//  .rst-endCap {
//    @include apply-properties("column", "border-width" "width");
//  }
//
//  .rst-clippingStopper {
//    @include apply-properties("column", "border-width" "padding-left");
//  }
//
//  .rst-headerContent > * {
//    @include apply-properties("head", "icon-spacing" "margin-right");
//  }
//
//  .rst-scrollingContainer {
//    &[data-drag-mode=resize] {
//      .rst-head {
//        @include apply-properties("head_resizing", "border-image");
//      }
//
//      .rst-body {
//        @include apply-properties("body_resizing", "opacity");
//      }
//    }
//  }
//}
//
//%disabled-placeholder {
//  .rst-placeholder {
//    @include apply-properties("placeholder",
//            "padding",
//            "text-align",
//            "color"
//    );
//  }
//}
//
//%disabled-rowOverlay {
//  .rst-body .rst-row > * {
//    background-color: var(--overlay-color);
//  }
//}
//
//%disabled-rowUnderline {
//  .rst-body .rst-row > * {
//    box-shadow: inset-border(var(--underline-width, 0px), var(--underline-color), bottom);
//  }
//}
//
//%disabled-rowStriped {
//  .rst-body .rst-row:nth-of-type(#{$stripe-order}) {
//    @include apply-properties("row_striped", "color");
//    --overlay-color: #{get-property("row_striped", "overlay-color")};
//  }
//}
//
//%disabled-rowHover {
//  .rst-body .rst-row:hover {
//    @include apply-properties("row_hover", "color");
//    --overlay-color: #{get-property("row_hover", "overlay-color")};
//  }
//}
//
//%disabled-rowActive {
//  .rst-row[#{flag-attr('active')}] {
//    --underline-width: #{get-property("row_active", "underline-width")};
//    --underline-color: #{get-property("row_active", "underline-color")};
//  }
//
//  &:focus-within .rst-row[#{flag-attr('active')}] {
//    --underline-color: #{get-property("row_active_focused", "underline-color")};
//  }
//}
//
//%disabled-rowSelected {
//  .rst-row[#{flag-attr('selected')}] {
//    @include apply-properties("row_selected", "color", "border-color", "background-color");
//  }
//
//  &:focus-within .rst-row[#{flag-attr('selected')}] {
//    @include apply-properties("row_selected_focused", "color", "border-color", "background-color");
//  }
//}
//
//%disabled-columnResizer {
//  .rst-columnResizer {
//    //Cover the column separator
//    transform: translateX(get-property("column-separator", "width"));
//    @include apply-properties("column-resizer", "width");
//  }
//
//  .rst-header, .rst-spacer {
//    &[#{flag-attr('resizing')}] .rst-columnResizer {
//      @include apply-properties("column-resizer_resizing", "border" "border-right");
//      transform: none;
//      height: 100vh;
//    }
//  }
//}
//
//%disabled-dragSelection {
//  .rst-dragSelection {
//    @include apply-properties("drag-selection",
//            "border",
//            "border-radius",
//            "background-color"
//    );
//  }
//}
//
//%disabled-pagination {
//  .rst-pagination {
//    @include apply-properties("pg",
//            "color",
//            "padding",
//            "item-spacing" "grid-gap"
//    );
//
//    .rst-page {
//      @include apply-properties("pg-page",
//              "padding",
//              "width",
//              "border-radius",
//              "border",
//              "color"
//      );
//      border-color: transparent;
//    }
//
//    button.rst-page {
//      $properties: "background-color", "border-color", "color";
//      @include apply-properties("pg-page", $properties...);
//
//      &:hover {
//        @include apply-properties("pg-page_hover", $properties...);
//      }
//
//      &[#{flag-attr('current')}] {
//        @include apply-properties("pg-page_current", $properties...);
//      }
//    }
//  }
//}
//
//%disabled-search {
//  .rst-searchContainer {
//    @include apply-properties("search-container",
//            "padding",
//            "width"
//    );
//  }
//
//  .rst-search {
//    input {
//      border: none;
//      outline: none;
//      background: none;
//    }
//
//    @include apply-properties("search",
//            "background-color",
//            "color",
//            "padding",
//            "border",
//            "border-radius",
//            "box-shadow",
//            "item-spacing" "column-gap"
//    );
//
//    .rst-matches {
//      @include apply-properties("search-matches",
//              "color"
//      );
//    }
//
//    .rst-separator {
//      @include apply-properties("search-separator",
//              "border" "border-right"
//      );
//    }
//
//    button {
//      line-height: 0;
//
//      @include apply-properties("search-btn",
//              "padding",
//              "border",
//              "border-radius",
//              "background-color"
//      );
//
//      &:hover {
//        @include apply-properties("search-btn_hover",
//                "background-color",
//                "border-color"
//        );
//      }
//    }
//  }
//}
