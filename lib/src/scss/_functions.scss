@use "vars" as *;

@function if-null($value, $fallback) {
  @if $value == null {
    @return $fallback;
  }

  @return $value;
}

@function get-var-name($name) {
  @return --#{$var-prefix}_#{$name};
}

@function get-config-name($module, $property) {
  @return get-var-name(#{$module}_#{$property});
}

@function get-state-config-name($module, $property) {
  @return get-config-name(#{get-root-module($module)}_, $property);
}

@function get-expanded-name($property, $expansion) {
  @if $expansion == null {
    @return $property;
  }

  @return #{$property}-#{$expansion};
}

@function get-root-module($module) {
  $state-parts: split($module, $state-separator);
  @return nth($state-parts, 1);
}

@function get-config-value($module, $property) {
  $name: get-config-name($module, $property);
  $state-parts: split($module, $state-separator);
  @if length($state-parts) >= 2 {
    $fallback-module: join(set-nth($state-parts, -1, null), $state-separator);
    @return var($name, get-config-value($fallback-module, $property))
  } @else {
    @return var($name);
  }
}

@function get-config-value-shorthand($module, $property) {
  $shorthand: ();
  @each $expansion in map-get($shorthands, $property) {
    $expanded: get-expanded-name($property, $expansion);
    $shorthand: append($shorthand, get-config-value($module, $expanded));
  }

  @return $shorthand;
}

@function nth-or-default($list, $n, $default: null) {
  @if length($list) >= $n {
    @return nth($list, $n);
  }

  @return $default;
}

@function split($string, $separator, $list: ()) {
  $index: str-index($string, $separator);
  @if $index == null {
    @return append($list, $string);
  }

  $start: str-slice($string, 1, $index - 1);
  $end: str-slice($string, $index + 1, -1);
  $list: append($list, $start);

  @return split($end, $separator, $list);
}

@function join($list, $separator) {
  $result: "";
  @each $item in $list {
    @if type-of($item) == "string" {
      $result: $result + $item + $separator;
    }
  }

  @return str-slice($result, 1, -1 - str-length($separator));
}

@function starts-with($string, $start) {
  $start-length: str-length($start);
  @if (str-length($string) < $start-length) {
    @return false;
  }

  @return str-slice(1, $start-length) == $start;
}

@function negative($value) {
  @return calc(#{$value} * -1);
}