@use "functions" as *;
@use "globals" as *;
@use "config" as *;

@mixin set-config-property($module, $property, $value) {
  #{get-config-name($module, $property)}: #{$value};
}

@mixin set-expanded-config-property($module, $base, $expansions) {
  @each $expansion, $value in $expansions {
    @include set-config-property($module, get-expanded-name($base, $expansion), $value);
  }
}

@mixin load-config-property($name, $value) {
  $parts: split($name, $property-separator);
  $module: nth($parts, 1);
  $property: nth($parts, 2);

  @if $property == "border" {
    //Auto generate properties from border, to be used as a fallback for more specific values
    @include set-expanded-config-property($module, $property, (
            "width": nth($value, 1),
            "style": nth-or-default($value, 2, initial),
            "color": nth-or-default($value, 3, initial)
    ));
  } @else if $property == "padding" {
    $top: nth($value, 1);
    $right: nth-or-default($value, 2, $top);
    @include set-expanded-config-property($module, $property, (
            "top": $top,
            "right": $right,
            "bottom": nth-or-default($value, 3, $top),
            "left": nth-or-default($value, 4, $right),
    ));
  } @else {
    @include set-config-property($module, $property, $value);
  }
}

@mixin load-config($config) {
  @each $name, $value in $config {
    @include load-config-property($name, $value);
  }
}

@mixin apply-property($module, $source, $destination) {
  @each $expansion in map-get($shorthands, $source) {
    $expandedSourceName: get-expanded-name($source, $expansion);
    $stateConfigName: get-state-config-name($module, $expandedSourceName);

    #{$stateConfigName}: #{get-config-value($module, $expandedSourceName)};
    #{get-expanded-name($destination, $expansion)}: var($stateConfigName);
  }
}

@mixin apply-properties($module, $properties...) {
  @each $property in $properties {
    @if type-of($property) == "list" {
      @include apply-properties($module, $property...);
    } @else {
      @each $source, $destinations in $property {
        @each $destination in $destinations {
          @include apply-property($module, $source, if-null($destination, $source))
        }
      }
    }
  }
}

@mixin override-properties($target-module) {
  @each $name, $value in $config {
    $parts: split($name, $property-separator);
    $module: nth($parts, 1);

    @if $module == $target-module {
      $property: nth($parts, 2);
      @each $expansion in map-get($shorthands, $property) {
        $expanded: get-expanded-name($property, $expansion);
        #{get-state-config-name($module, $expanded)}: #{get-config-value($module, $expanded)};
      }
    }
  }
}

//@mixin apply-properties($module, $properties...) {
//  @each $source, $destinations in keywords($properties) {
//    @each $destination in $destinations {
//      @include apply-property($module, $source, $destination)
//    }
//  }
//
//  @each $property in $properties {
//    $type: type-of($property);
//    @if $type == "list" or $type == "map" {
//      @include apply-properties($module, $property...);
//    } @else {
//      @include apply-property($module, $property, $property);
//    }
//  }
//}

@mixin inner-border-above($side, $width, $color) {
  $offset: map-get((
          top: 0 $width,
          right: negative($width) 0,
          bottom: 0 negative($width),
          left: $width 0
  ), $side);

  box-shadow: inset $offset 0 0 $color;
  padding-#{$side}: $width;
}

@mixin inner-border-below($side, $border) {
  $inset: map-get((
          top: 0 0 auto 0,
          right: 0 0 0 auto,
          bottom: auto 0 0 0,
          left: 0 auto 0 0
  ), $side);

  padding-#{$side}: nth($border, 1);

  &::before {
    content: "";
    display: block;

    position: absolute;
    inset: $inset;

    border-#{$side}: $border;
  }
}
