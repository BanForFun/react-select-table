%rst-table {
    th {
        font-weight: rst-get("th-font-weight");
    }

    td, th {
        padding: rst-get("cell-padding");
        vertical-align: rst-get("cell-vertical-align");
    }

    thead > tr > * {
        border-bottom-width: rst-get("header-border-width");

        //Doing this in a weird way, because we don't want the right border of the last header to be visible by default
        //We also don't want to offset the header text (if we set the left border)
        &:not(:last-of-type) {
            //Only header (spacer is td)
            border-right-width: rst-get("cell-border-width");
        }

        &:last-child {
            //The spacer column
            border-left-width: rst-get("cell-border-width");
        }
    }

    tbody > tr > * {
        border-bottom-width: rst-get("cell-border-width");
    }

    .rst-columnResizer {
        width: rst-get("column-resizer-width");
    }

    .rst-sortIcon {
        margin: rst-get("sort-icon-margin");
    }

    .rst-container {
        margin: rst-get("table-margin");
    }

    thead {
        background-color: rst-get("head-bg");
        color: rst-get("head-color");
        border-color: rst-get("head-border");
    }

    tbody {
        background-color: rst-get("body-bg");
        color: rst-get("body-color");
        border-color: rst-get("body-border");
    }
}

%rst-placeholders {
    .rst-tablePlaceholder {
        padding: rst-get("table-placeholder-padding");
        text-align: rst-get("table-placeholder-text-align");
    }

    .rst-bodyPlaceholder {
        padding: rst-get("body-placeholder-padding");
        text-align: rst-get("body-placeholder-text-align");
    }
}

%rst-rowStriped {
    tbody tr:nth-of-type(#{$rst-striped-order}) {
        @include rst-row-overlay("row-striped-overlay");
        color: rst-get("row-striped-color");
    }
}

%rst-rowHover {
    tbody tr:hover {
        @include rst-row-overlay("row-hover-overlay");
        color: rst-get("row-hover-color");
    }
}

%rst-rowActive {
    tbody tr.is-active {
        @include rst-row-underline("row-active-underline");

        &.is-selected {
            @include rst-row-underline("row-active-selected-underline");
        }
    }

    &:focus-within tbody tr.is-active {
        @include rst-row-underline("row-active-focused-underline");

        &.is-selected {
            @include rst-row-underline("row-active-selected-focused-underline");
        }
    }
}

%rst-rowSelected {
    tbody tr.is-selected {
        @include rst-row-overlay("row-selected-overlay");
        color: rst-get("row-selected-color");
        border-color: rst-get("row-selected-border");
    }

    &:focus-within tbody tr.is-selected {
        @include rst-row-overlay("row-selected-focused-overlay");
        color: rst-get("row-selected-focused-color");
        border-color: rst-get("row-selected-focused-border");
    }
}

%rst-columnResizer {
    .rst-resizingContainer:not(.is-resizing) .rst-columnResizer:active {
        background-color: rst-get("column-resizer-active-bg");
    }
}

%rst-dragSelection {
    .rst-dragSelection {
        border-width: rst-get("drag-selection-border-width");
        border-color: rst-get("drag-selection-border");
        background-color: rst-get("drag-selection-bg");
    }
}

%rst-pg {
    .rst-paginationContainer {
        margin: rst-get("pg-margin");
    }

    .rst-pagination {
        margin: 0 rst-get("pg-btn-spacing", -1);
    }

    .rst-page {
        margin: 0 rst-get("pg-btn-spacing");
        padding: rst-get("pg-btn-padding");
        width: rst-get("pg-btn-width");
    }

    button.rst-page {
        border-radius: rst-get("pg-btn-border-radius");
        border-width: rst-get("pg-btn-border-width");
    }
}

%rst-pgBtn {
    .rst-pagination {
        color: rst-get("pg-btn-color");
    }

    button.rst-page {
        background-color: rst-get("pg-btn-bg");
        border-color: rst-get("pg-btn-border");
    }
}

%rst-pgBtnDisabled {
    button.rst-page:disabled {
        background-color: rst-get("pg-btn-disabled-bg");
        border-color: rst-get("pg-btn-disabled-border");
        color: rst-get("pg-btn-disabled-color")
    }
}

%rst-pgBtnHover {
    button.rst-page:hover {
        background-color: rst-get("pg-btn-hover-bg");
        border-color: rst-get("pg-btn-hover-border");
        color: rst-get("pg-btn-hover-color")
    }
}

%rst-pgBtnCurrent {
    button.rst-page.is-current {
        background-color: rst-get("pg-btn-current-bg");
        border-color: rst-get("pg-btn-current-border");
        color: rst-get("pg-btn-current-color")
    }
}

.rst-table {
    @include rst-load-config($rst-config);

    @extend %rst-table;
    @extend %rst-placeholders;
    @extend %rst-rowActive;
    @extend %rst-rowStriped;
    @extend %rst-rowHover;
    @extend %rst-rowSelected;
    @extend %rst-dragSelection;
    @extend %rst-columnResizer;
    @extend %rst-pg;
    @extend %rst-pgBtn;
    @extend %rst-pgBtnDisabled;
    @extend %rst-pgBtnHover;
    @extend %rst-pgBtnCurrent;
}
