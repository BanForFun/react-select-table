@mixin rst-set($module, $property, $value) {
    $name: rst-get-name($module, $property);
    #{$name}: #{$value};
}

@mixin rst-load-config($config) {
    $property-separator: ".";
    $state-separator: "_";
    $module-separator: "-";

    @each $name, $value in $config {
        $parts: rst-split($name, $property-separator);

        $module: nth($parts, 1);
        $property: nth($parts, 2);

        $module_parts: rst-split($module, $state-separator);
        $module: rst-join($module_parts, $module-separator);

        @if $value != null {
            @if $property == "border" {
                //Auto generate border-color property from border, to be used as a fallback for more specific values
                $color: rst-nth-or-default($value, 3, currentColor);
                @include rst-set($module, "border-color", $color);
            }
        } @else if length($module_parts) >= 2 {
            //Fallback to less specific value
            $parent_module: rst-join(set-nth($module_parts, -1, null), $module-separator);
            $value: rst-get($parent-module, $property);
        } @else {
            $value: initial;
        }

        @include rst-set($module, $property, $value);
    }
}

@mixin rst-apply-properties($module, $properties...) {
    @each $property in $properties {
        $value: rst-get($module, $property);

        @if $property == "overlay" {
            @include rst-row-overlay($value);
        } @else if $property == "underline" {
            @include rst-row-underline($value);
        } @else {
            #{$property}: $value;
        }
    }
}

@mixin rst-row-overlay($color) {
    & > td, th {
        background-color: $color;
    }
}

@mixin rst-row-underline($color) {
    $width: rst-get("row", "underline-width");
    box-shadow: inset 0 calc(#{$width} * -1) 0 0 $color;

    & > td, th {
        //-1px is used to prevent anti-aliasing on the clipping mask resulting in spaces
        clip-path: inset(-1px -1px $width -1px);
    }
}
